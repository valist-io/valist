// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package valist

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ValistMetaData contains all meta data concerning the Valist contract.
var ValistMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"ProjectMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"ProjectMemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"ProjectUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ReleaseApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"ReleaseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ReleaseRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"TeamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"TeamMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"TeamMemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"TeamUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addProjectMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"}],\"name\":\"approveRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"}],\"name\":\"createRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"createTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"getLatestReleaseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getProjectMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"getProjectMetaCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getProjectNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getReleaseApprovers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"}],\"name\":\"getReleaseMetaCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getReleaseNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getReleaseRejectors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getTeamMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"}],\"name\":\"getTeamMetaCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getTeamNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"}],\"name\":\"rejectRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeProjectMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"}],\"name\":\"setProjectMetaCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaCID\",\"type\":\"string\"}],\"name\":\"setTeamMetaCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c060405260056080819052640322e322e360dc1b60a09081526200002891600691906200007f565b503480156200003657600080fd5b50604051620035a8380380620035a8833981016040819052620000599162000125565b600080546001600160a01b0319166001600160a01b039290921691909117905562000192565b8280546200008d9062000155565b90600052602060002090601f016020900481019282620000b15760008555620000fc565b82601f10620000cc57805160ff1916838001178555620000fc565b82800160010185558215620000fc579182015b82811115620000fc578251825591602001919060010190620000df565b506200010a9291506200010e565b5090565b5b808211156200010a57600081556001016200010f565b60006020828403121562000137578081fd5b81516001600160a01b03811681146200014e578182fd5b9392505050565b600181811c908216806200016a57607f821691505b602082108114156200018c57634e487b7160e01b600052602260045260246000fd5b50919050565b61340680620001a26000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80635be9d4b2116100c3578063b1bc8c8d1161007c578063b1bc8c8d146102f9578063baffd3da1461030c578063cded382f1461031f578063cfc5efac14610332578063ecb0a33d14610345578063fcaa705e1461035857600080fd5b80635be9d4b2146102875780635c5370961461029a5780635f36788e146102ad57806381ded150146102c057806383dfd03e146102d3578063a6a54ec5146102e657600080fd5b8063486ff0cd11610115578063486ff0cd146101f45780634ce72c75146101fc5780634eec58a31461020f5780634ff3ec601461022f578063572b6c05146102425780635bc25e771461027457600080fd5b80630716dfa01461015d57806311bc1ce01461017257806317289818146101855780632aa2fd64146101ae5780632d19fdfe146101c157806347566e4f146101d4575b600080fd5b61017061016b366004612d97565b61036b565b005b610170610180366004612c77565b61058c565b610198610193366004612e32565b6106e8565b6040516101a59190612fee565b60405180910390f35b6101706101bc366004612b84565b6108c7565b6101706101cf366004612b24565b610a6b565b6101e76101e2366004612b24565b610bce565b6040516101a5919061309c565b6101e7610d38565b61019861020a366004612ec7565b610dc6565b61022261021d366004612f82565b610f6d565b6040516101a5919061303b565b61017061023d366004612cf0565b611111565b610264610250366004612a85565b6000546001600160a01b0391821691161490565b60405190151581526020016101a5565b6101e7610282366004612a9f565b611309565b6101e7610295366004612b24565b611447565b6101706102a8366004612b84565b611592565b6101706102bb366004612bf4565b611718565b6101706102ce366004612ad9565b611930565b6102226102e1366004612ec7565b611a44565b6102226102f4366004612f37565b611c6c565b610198610307366004612e32565b611e76565b61017061031a366004612c77565b61203c565b6101e761032d366004612c77565b612178565b610198610340366004612f37565b6122ea565b610170610353366004612ad9565b612459565b610170610366366004612c77565b612575565b6000468580519060200120604051602001610390929190918252602082015260400190565b60408051808303601f19018152828252805160209182012087518883012091840181905291830152915060009060600160408051808303601f1901815282825280516020918201208751888301209184018190529183015291506000906060016040516020818303038152906040528051906020012060001c905061042d6104166126ba565b6000848152600360205260409020600101906126e0565b6104705760405162461bcd60e51b815260206004820152600f60248201526e32b93916b83937b516b6b2b6b132b960891b60448201526064015b60405180910390fd5b600081815260056020526040902080546104899061334e565b1590506104a85760405162461bcd60e51b8152600401610467906131fe565b60008451116104c95760405162461bcd60e51b815260040161046790613228565b60008551116104ea5760405162461bcd60e51b815260040161046790613250565b60008181526005602090815260409091208551610509928701906128e9565b5060008281526003602090815260408220805460018101825590835291819020875161053c9391909101918801906128e9565b507f15fb1d214ed195f7210e450a416a0640362c37a0a2d2d0ab63481f967aae0e008787878761056a6126ba565b60405161057b95949392919061316a565b60405180910390a150505050505050565b60004684805190602001206040516020016105b1929190918252602082015260400190565b60408051601f198184030181528282528051602091820120865187830120828501829052848401528251808503840181526060850184528051908301208651878401206080860182905260a0808701919091528451808703909101815260c090950184528451948301949094206000818152600590935292822080549195509061063a9061334e565b9050116106595760405162461bcd60e51b815260040161046790613278565b6106786106646126ba565b600083815260046020526040902090612705565b5061069b6106846126ba565b60008381526004602052604090206002019061271a565b507fa70c9d49a7ef09401d07a7aad126689c097b80db50504ce9ba5ca8b6f6477fb88686866106c86126ba565b6040516106d89493929190613117565b60405180910390a1505050505050565b6060600046878051906020012060405160200161070f929190918252602082015260400190565b60408051808303601f19018152828252805160209182012089518a83012091840181905291830152915060009060600160408051808303601f19018152828252805160209182012089518a83012091840181905291830152915060009060600160408051601f198184030181529190528051602090910120905060006107958688613318565b905060006107a38783613300565b60008481526004602052604090209091506107c09060020161272f565b8111156107e45760008381526004602052604090206107e19060020161272f565b90505b60006107f08383613337565b6001600160401b0381111561081557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561083e578160200160208202803683370190505b509050825b828110156108b75760008581526004602052604090206108669060020182612739565b826108718684613337565b8151811061088f57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526108b081613389565b9050610843565b509b9a5050505050505050505050565b60004684805190602001206040516020016108ec929190918252602082015260400190565b60408051808303601f19018152828252805160209182012086518783012091840181905291830152915060009060600160408051601f198184030181529181528151602092830120600081815260059093529082208054919350906109509061334e565b90501161096f5760405162461bcd60e51b8152600401610467906131d2565b61099161097a6126ba565b6000848152600260205260409020600101906126e0565b15156001146109b25760405162461bcd60e51b8152600401610467906132a7565b60008181526003602052604090206109cd90600101846126e0565b15610a0d5760405162461bcd60e51b815260206004820152601060248201526f195c9c8b5b595b58995c8b595e1a5cdd60821b6044820152606401610467565b6000818152600360205260409020610a289060010184612705565b507f8eb5dc57e01da32e2b98214d39ebdd82cd801d261855d5f84b868b5f140a2980858585604051610a5c939291906130d9565b60405180910390a15050505050565b6000468380519060200120604051602001610a90929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c9050610acd610ab66126ba565b6000838152600260205260409020600101906126e0565b610ae95760405162461bcd60e51b8152600401610467906132a7565b60008181526005602052604081208054610b029061334e565b905011610b465760405162461bcd60e51b8152602060048201526012602482015271195c9c8b5d19585b4b5b9bdd0b595e1a5cdd60721b6044820152606401610467565b6000825111610b675760405162461bcd60e51b815260040161046790613228565b60008181526005602090815260409091208351610b86928501906128e9565b507f337efabade1b5802f3a562a44eb0b3222d30ad7717e865d76f4db7ecbea56e808383610bb26126ba565b604051610bc1939291906130d9565b60405180910390a1505050565b60606000468480519060200120604051602001610bf5929190918252602082015260400190565b60408051808303601f19018152828252805160209182012086518783012091840181905291830152915060009060600160408051601f198184030181529181528151602092830120600081815260039093529120805491925090610c6b5760405162461bcd60e51b8152600401610467906131d2565b80548190610c7b90600190613337565b81548110610c9957634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610cae9061334e565b80601f0160208091040260200160405190810160405280929190818152602001828054610cda9061334e565b8015610d275780601f10610cfc57610100808354040283529160200191610d27565b820191906000526020600020905b815481529060010190602001808311610d0a57829003601f168201915b505050505093505050505b92915050565b60068054610d459061334e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d719061334e565b8015610dbe5780601f10610d9357610100808354040283529160200191610dbe565b820191906000526020600020905b815481529060010190602001808311610da157829003601f168201915b505050505081565b60606000468680519060200120604051602001610ded929190918252602082015260400190565b60408051601f19818403018152828252805160209182012088518983012082850182905284840152825180850384018152606090940190925282519201919091209091506000610e3d8587613318565b90506000610e4b8683613300565b6000848152600360205260409020909150610e689060010161272f565b811115610e8c576000838152600360205260409020610e899060010161272f565b90505b6000610e988383613337565b6001600160401b03811115610ebd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ee6578160200160208202803683370190505b509050825b82811015610f5f576000858152600360205260409020610f0e9060010182612739565b82610f198684613337565b81518110610f3757634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152610f5881613389565b9050610eeb565b509998505050505050505050565b60606000610f7b8385613318565b90506000610f898483613300565b600154909150811115610f9b57506001545b6000610fa78383613337565b6001600160401b03811115610fcc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fff57816020015b6060815260200190600190039081610fea5790505b509050825b82811015611107576001818154811061102d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200180546110429061334e565b80601f016020809104026020016040519081016040528092919081815260200182805461106e9061334e565b80156110bb5780601f10611090576101008083540402835291602001916110bb565b820191906000526020600020905b81548152906001019060200180831161109e57829003601f168201915b50505050508285836110cd9190613337565b815181106110eb57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508061110090613389565b9050611004565b5095945050505050565b6000468580519060200120604051602001611136929190918252602082015260400190565b60408051601f198184030181528282528051602091820120875188830120828501829052848401528251808503840181526060909401909252825192019190912090915061118561097a6126ba565b6111a15760405162461bcd60e51b8152600401610467906132a7565b600081815260056020526040902080546111ba9061334e565b1590506111d95760405162461bcd60e51b8152600401610467906131fe565b60008451116111fa5760405162461bcd60e51b815260040161046790613228565b600085511161121b5760405162461bcd60e51b815260040161046790613250565b6000818152600560209081526040909120855161123a928701906128e9565b5060008281526002602090815260408220805460018101825590835291819020875161126d9391909101918801906128e9565b5060005b83518110156112dc576112c984828151811061129d57634e487b7160e01b600052603260045260246000fd5b60200260200101516003600085815260200190815260200160002060010161270590919063ffffffff16565b50806112d481613389565b915050611271565b507f11f7f07de1d35c43b47edd8a19e7f8208259cdf66344de81856c5bb7c798db268686866106c86126ba565b60606000468380519060200120604051602001611330929190918252602082015260400190565b60408051601f198184030181529181528151602092830120600081815260059093529082208054919350906113649061334e565b9050116113a85760405162461bcd60e51b8152602060048201526012602482015271195c9c8b5d19585b4b5b9bdd0b595e1a5cdd60721b6044820152606401610467565b600081815260056020526040902080546113c19061334e565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed9061334e565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b5050505050915050919050565b6060600046848051906020012060405160200161146e929190918252602082015260400190565b60408051808303601f19018152828252805160209182012086518783012091840181905291830152915060009060600160408051601f198184030181529181528151602092830120600081815260059093529082208054919350906114d29061334e565b9050116114f15760405162461bcd60e51b8152600401610467906131d2565b6000818152600560205260409020805461150a9061334e565b80601f01602080910402602001604051908101604052809291908181526020018280546115369061334e565b80156115835780601f1061155857610100808354040283529160200191611583565b820191906000526020600020905b81548152906001019060200180831161156657829003601f168201915b50505050509250505092915050565b60004684805190602001206040516020016115b7929190918252602082015260400190565b60408051808303601f19018152828252805160209182012086518783012091840181905291830152915060009060600160408051601f1981840301815291815281516020928301206000818152600590935290822080549193509061161b9061334e565b90501161163a5760405162461bcd60e51b8152600401610467906131d2565b61164561097a6126ba565b15156001146116665760405162461bcd60e51b8152600401610467906132a7565b600081815260036020526040902061168190600101846126e0565b15156001146116c95760405162461bcd60e51b8152602060048201526014602482015273195c9c8b5b595b58995c8b5b9bdd0b595e1a5cdd60621b6044820152606401610467565b60008181526003602052604090206116e4906001018461271a565b507f7bd4fdf0f1872366f33f1732f765696c1ec3ddccaa8c1f72095b58d8f411fa93858585604051610a5c939291906130d9565b600046848051906020012060405160200161173d929190918252602082015260400190565b60408051601f1981840301815291815281516020928301206000818152600590935291208054919250906117709061334e565b15905061178f5760405162461bcd60e51b8152600401610467906131fe565b60008351116117b05760405162461bcd60e51b815260040161046790613228565b60008451116117d15760405162461bcd60e51b815260040161046790613250565b60008251116118165760405162461bcd60e51b81526020600482015260116024820152706572722d656d7074792d6d656d6265727360781b6044820152606401610467565b60008181526005602090815260409091208451611835928601906128e9565b506001805480820182556000919091528451611878917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6019060208701906128e9565b5060005b82518110156118e7576118d48382815181106118a857634e487b7160e01b600052603260045260246000fd5b60200260200101516002600085815260200190815260200160002060010161270590919063ffffffff16565b50806118df81613389565b91505061187c565b507f234eb9d37ed58b55e52e99246bb2b0cebb55311292e5d3de44a6df95a9af250184846119136126ba565b604051611922939291906130d9565b60405180910390a150505050565b6000468380519060200120604051602001611955929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c905061197b610ab66126ba565b151560011461199c5760405162461bcd60e51b8152600401610467906132a7565b60008181526002602052604090206119b790600101836126e0565b156119f75760405162461bcd60e51b815260206004820152601060248201526f195c9c8b5b595b58995c8b595e1a5cdd60821b6044820152606401610467565b6000818152600260205260409020611a129060010183612705565b507fb1ce9c84087af16e758e7041eec971f57c833f4127f64f742c5b0ee14e0537d28383604051610bc19291906130af565b60606000468680519060200120604051602001611a6b929190918252602082015260400190565b60408051601f19818403018152828252805160209182012088518983012082850182905284840152825180850384018152606090940190925282519201919091209091506000611abb8587613318565b90506000611ac98683613300565b600084815260036020526040902054909150811115611af357506000828152600360205260409020545b6000611aff8383613337565b6001600160401b03811115611b2457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b5757816020015b6060815260200190600190039081611b425790505b509050825b82811015610f5f576000858152600360205260409020805482908110611b9257634e487b7160e01b600052603260045260246000fd5b906000526020600020018054611ba79061334e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd39061334e565b8015611c205780601f10611bf557610100808354040283529160200191611c20565b820191906000526020600020905b815481529060010190602001808311611c0357829003601f168201915b5050505050828583611c329190613337565b81518110611c5057634e487b7160e01b600052603260045260246000fd5b602002602001018190525080611c6590613389565b9050611b5c565b60606000468580519060200120604051602001611c93929190918252602082015260400190565b60408051601f19818403018152919052805160209091012090506000611cb98486613318565b90506000611cc78583613300565b600084815260026020526040902054909150811115611cf157506000828152600260205260409020545b6000611cfd8383613337565b6001600160401b03811115611d2257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d5557816020015b6060815260200190600190039081611d405790505b509050825b82811015611e6a576000858152600260205260409020805482908110611d9057634e487b7160e01b600052603260045260246000fd5b906000526020600020018054611da59061334e565b80601f0160208091040260200160405190810160405280929190818152602001828054611dd19061334e565b8015611e1e5780601f10611df357610100808354040283529160200191611e1e565b820191906000526020600020905b815481529060010190602001808311611e0157829003601f168201915b5050505050828583611e309190613337565b81518110611e4e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080611e6390613389565b9050611d5a565b50979650505050505050565b60606000468780519060200120604051602001611e9d929190918252602082015260400190565b60408051808303601f19018152828252805160209182012089518a83012091840181905291830152915060009060600160408051808303601f19018152828252805160209182012089518a83012091840181905291830152915060009060600160408051601f19818403018152919052805160209091012090506000611f238688613318565b90506000611f318783613300565b6000848152600460205260409020909150611f4b9061272f565b811115611f6c576000838152600460205260409020611f699061272f565b90505b6000611f788383613337565b6001600160401b03811115611f9d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611fc6578160200160208202803683370190505b509050825b828110156108b7576000858152600460205260409020611feb9082612739565b82611ff68684613337565b8151811061201457634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015261203581613389565b9050611fcb565b6000468480519060200120604051602001612061929190918252602082015260400190565b60408051601f198184030181528282528051602091820120865187830120828501829052848401528251808503840181526060850184528051908301208651878401206080860182905260a0808701919091528451808703909101815260c09095018452845194830194909420600081815260059093529282208054919550906120ea9061334e565b9050116121095760405162461bcd60e51b815260040161046790613278565b61212b6121146126ba565b600083815260046020526040902060020190612705565b5061214b6121376126ba565b60008381526004602052604090209061271a565b507f30ca79684c561b1b6fbda88d9779021eb510471ea1df05c10dc39c46d6ed94eb8686866106c86126ba565b6060600046858051906020012060405160200161219f929190918252602082015260400190565b60408051601f198184030181528282528051602091820120875188830120828501829052848401528251808503840181526060850184528051908301208751888401206080860182905260a0808701919091528451808703909101815260c09095018452845194830194909420600081815260059093529282208054919550906122289061334e565b9050116122475760405162461bcd60e51b815260040161046790613278565b600081815260056020526040902080546122609061334e565b80601f016020809104026020016040519081016040528092919081815260200182805461228c9061334e565b80156122d95780601f106122ae576101008083540402835291602001916122d9565b820191906000526020600020905b8154815290600101906020018083116122bc57829003601f168201915b505050505093505050509392505050565b60606000468580519060200120604051602001612311929190918252602082015260400190565b60408051601f198184030181529190528051602090910120905060006123378486613318565b905060006123458583613300565b60008481526002602052604090209091506123629060010161272f565b8111156123865760008381526002602052604090206123839060010161272f565b90505b60006123928383613337565b6001600160401b038111156123b757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156123e0578160200160208202803683370190505b509050825b82811015611e6a5760008581526002602052604090206124089060010182612739565b826124138684613337565b8151811061243157634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015261245281613389565b90506123e5565b600046838051906020012060405160200161247e929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c90506124a4610ab66126ba565b15156001146124c55760405162461bcd60e51b8152600401610467906132a7565b60008181526002602052604090206124e090600101836126e0565b15156001146125285760405162461bcd60e51b8152602060048201526014602482015273195c9c8b5b595b58995c8b5b9bdd0b595e1a5cdd60621b6044820152606401610467565b6000818152600260205260409020612543906001018361271a565b507fbd84f6be96016aa1d03fd0c0ce516da6b2e352520bddd280c744c6c79a3785128383604051610bc19291906130af565b600046848051906020012060405160200161259a929190918252602082015260400190565b60408051601f19818403018152828252805160209182012086518783012082850182905284840152825180850384018152606090940190925282519201919091209091506125e961097a6126ba565b6126055760405162461bcd60e51b8152600401610467906132a7565b6000818152600560205260408120805461261e9061334e565b90501161263d5760405162461bcd60e51b8152600401610467906131d2565b600083511161265e5760405162461bcd60e51b815260040161046790613228565b6000818152600560209081526040909120845161267d928601906128e9565b507fd837747757bf732c911148d7c5825d52de171f849e76143eec98fa514e263c8a8585856126aa6126ba565b604051610a5c9493929190613117565b600080546001600160a01b03163314156126db575060131936013560601c90565b503390565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006126fe836001600160a01b038416612745565b60006126fe836001600160a01b038416612794565b6000610d32825490565b60006126fe83836128b1565b600081815260018301602052604081205461278c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d32565b506000610d32565b600081815260018301602052604081205480156128a75760006127b8600183613337565b85549091506000906127cc90600190613337565b905081811461284d5760008660000182815481106127fa57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061282b57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061286c57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d32565b6000915050610d32565b60008260000182815481106128d657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b8280546128f59061334e565b90600052602060002090601f016020900481019282612917576000855561295d565b82601f1061293057805160ff191683800117855561295d565b8280016001018555821561295d579182015b8281111561295d578251825591602001919060010190612942565b5061296992915061296d565b5090565b5b80821115612969576000815560010161296e565b80356001600160a01b038116811461299957600080fd5b919050565b600082601f8301126129ae578081fd5b813560206001600160401b038211156129c9576129c96133ba565b8160051b6129d88282016132d0565b8381528281019086840183880185018910156129f2578687fd5b8693505b85841015611e6a57612a0781612982565b8352600193909301929184019184016129f6565b600082601f830112612a2b578081fd5b81356001600160401b03811115612a4457612a446133ba565b612a57601f8201601f19166020016132d0565b818152846020838601011115612a6b578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612a96578081fd5b6126fe82612982565b600060208284031215612ab0578081fd5b81356001600160401b03811115612ac5578182fd5b612ad184828501612a1b565b949350505050565b60008060408385031215612aeb578081fd5b82356001600160401b03811115612b00578182fd5b612b0c85828601612a1b565b925050612b1b60208401612982565b90509250929050565b60008060408385031215612b36578182fd5b82356001600160401b0380821115612b4c578384fd5b612b5886838701612a1b565b93506020850135915080821115612b6d578283fd5b50612b7a85828601612a1b565b9150509250929050565b600080600060608486031215612b98578081fd5b83356001600160401b0380821115612bae578283fd5b612bba87838801612a1b565b94506020860135915080821115612bcf578283fd5b50612bdc86828701612a1b565b925050612beb60408501612982565b90509250925092565b600080600060608486031215612c08578283fd5b83356001600160401b0380821115612c1e578485fd5b612c2a87838801612a1b565b94506020860135915080821115612c3f578384fd5b612c4b87838801612a1b565b93506040860135915080821115612c60578283fd5b50612c6d8682870161299e565b9150509250925092565b600080600060608486031215612c8b578283fd5b83356001600160401b0380821115612ca1578485fd5b612cad87838801612a1b565b94506020860135915080821115612cc2578384fd5b612cce87838801612a1b565b93506040860135915080821115612ce3578283fd5b50612c6d86828701612a1b565b60008060008060808587031215612d05578081fd5b84356001600160401b0380821115612d1b578283fd5b612d2788838901612a1b565b95506020870135915080821115612d3c578283fd5b612d4888838901612a1b565b94506040870135915080821115612d5d578283fd5b612d6988838901612a1b565b93506060870135915080821115612d7e578283fd5b50612d8b8782880161299e565b91505092959194509250565b60008060008060808587031215612dac578384fd5b84356001600160401b0380821115612dc2578586fd5b612dce88838901612a1b565b95506020870135915080821115612de3578485fd5b612def88838901612a1b565b94506040870135915080821115612e04578384fd5b612e1088838901612a1b565b93506060870135915080821115612e25578283fd5b50612d8b87828801612a1b565b600080600080600060a08688031215612e49578081fd5b85356001600160401b0380821115612e5f578283fd5b612e6b89838a01612a1b565b96506020880135915080821115612e80578283fd5b612e8c89838a01612a1b565b95506040880135915080821115612ea1578283fd5b50612eae88828901612a1b565b9598949750949560608101359550608001359392505050565b60008060008060808587031215612edc578384fd5b84356001600160401b0380821115612ef2578586fd5b612efe88838901612a1b565b95506020870135915080821115612f13578485fd5b50612f2087828801612a1b565b949794965050505060408301359260600135919050565b600080600060608486031215612f4b578081fd5b83356001600160401b03811115612f60578182fd5b612f6c86828701612a1b565b9660208601359650604090950135949350505050565b60008060408385031215612f94578182fd5b50508035926020909101359150565b60008151808452815b81811015612fc857602081850181015186830182015201612fac565b81811115612fd95782602083870101525b50601f01601f19169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b8181101561302f5783516001600160a01b03168352928401929184019160010161300a565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561308f57603f1988860301845261307d858351612fa3565b94509285019290850190600101613061565b5092979650505050505050565b6020815260006126fe6020830184612fa3565b6040815260006130c26040830185612fa3565b905060018060a01b03831660208301529392505050565b6060815260006130ec6060830186612fa3565b82810360208401526130fe8186612fa3565b91505060018060a01b0383166040830152949350505050565b60808152600061312a6080830187612fa3565b828103602084015261313c8187612fa3565b905082810360408401526131508186612fa3565b91505060018060a01b038316606083015295945050505050565b60a08152600061317d60a0830188612fa3565b828103602084015261318f8188612fa3565b905082810360408401526131a38187612fa3565b905082810360608401526131b78186612fa3565b91505060018060a01b03831660808301529695505050505050565b602080825260129082015271195c9c8b5c1c9bda8b5b9bdd0b595e1a5cdd60721b604082015260600190565b60208082526010908201526f195c9c8b5b985b594b58db185a5b595960821b604082015260600190565b6020808252600e908201526d6572722d656d7074792d6d65746160901b604082015260600190565b6020808252600e908201526d6572722d656d7074792d6e616d6560901b604082015260600190565b602080825260159082015274195c9c8b5c995b19585cd94b5b9bdd0b595e1a5cdd605a1b604082015260600190565b6020808252600f908201526e32b93916ba32b0b696b6b2b6b132b960891b604082015260600190565b604051601f8201601f191681016001600160401b03811182821017156132f8576132f86133ba565b604052919050565b60008219821115613313576133136133a4565b500190565b6000816000190483118215151615613332576133326133a4565b500290565b600082821015613349576133496133a4565b500390565b600181811c9082168061336257607f821691505b6020821081141561338357634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561339d5761339d6133a4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122021f1b85aaee84cf0c944a2b0a2f4e7fd46987d2059dfa396ab60ddf1ee48529e64736f6c63430008040033",
}

// ValistABI is the input ABI used to generate the binding from.
// Deprecated: Use ValistMetaData.ABI instead.
var ValistABI = ValistMetaData.ABI

// ValistBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValistMetaData.Bin instead.
var ValistBin = ValistMetaData.Bin

// DeployValist deploys a new Ethereum contract, binding an instance of Valist to it.
func DeployValist(auth *bind.TransactOpts, backend bind.ContractBackend, _trustedForwarder common.Address) (common.Address, *types.Transaction, *Valist, error) {
	parsed, err := ValistMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValistBin), backend, _trustedForwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Valist{ValistCaller: ValistCaller{contract: contract}, ValistTransactor: ValistTransactor{contract: contract}, ValistFilterer: ValistFilterer{contract: contract}}, nil
}

// Valist is an auto generated Go binding around an Ethereum contract.
type Valist struct {
	ValistCaller     // Read-only binding to the contract
	ValistTransactor // Write-only binding to the contract
	ValistFilterer   // Log filterer for contract events
}

// ValistCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValistCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValistTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValistTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValistFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValistFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValistSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValistSession struct {
	Contract     *Valist           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValistCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValistCallerSession struct {
	Contract *ValistCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ValistTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValistTransactorSession struct {
	Contract     *ValistTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValistRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValistRaw struct {
	Contract *Valist // Generic contract binding to access the raw methods on
}

// ValistCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValistCallerRaw struct {
	Contract *ValistCaller // Generic read-only contract binding to access the raw methods on
}

// ValistTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValistTransactorRaw struct {
	Contract *ValistTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValist creates a new instance of Valist, bound to a specific deployed contract.
func NewValist(address common.Address, backend bind.ContractBackend) (*Valist, error) {
	contract, err := bindValist(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Valist{ValistCaller: ValistCaller{contract: contract}, ValistTransactor: ValistTransactor{contract: contract}, ValistFilterer: ValistFilterer{contract: contract}}, nil
}

// NewValistCaller creates a new read-only instance of Valist, bound to a specific deployed contract.
func NewValistCaller(address common.Address, caller bind.ContractCaller) (*ValistCaller, error) {
	contract, err := bindValist(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValistCaller{contract: contract}, nil
}

// NewValistTransactor creates a new write-only instance of Valist, bound to a specific deployed contract.
func NewValistTransactor(address common.Address, transactor bind.ContractTransactor) (*ValistTransactor, error) {
	contract, err := bindValist(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValistTransactor{contract: contract}, nil
}

// NewValistFilterer creates a new log filterer instance of Valist, bound to a specific deployed contract.
func NewValistFilterer(address common.Address, filterer bind.ContractFilterer) (*ValistFilterer, error) {
	contract, err := bindValist(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValistFilterer{contract: contract}, nil
}

// bindValist binds a generic wrapper to an already deployed contract.
func bindValist(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValistABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Valist *ValistRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Valist.Contract.ValistCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Valist *ValistRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Valist.Contract.ValistTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Valist *ValistRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Valist.Contract.ValistTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Valist *ValistCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Valist.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Valist *ValistTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Valist.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Valist *ValistTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Valist.Contract.contract.Transact(opts, method, params...)
}

// GetLatestReleaseName is a free data retrieval call binding the contract method 0x47566e4f.
//
// Solidity: function getLatestReleaseName(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistCaller) GetLatestReleaseName(opts *bind.CallOpts, _teamName string, _projectName string) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getLatestReleaseName", _teamName, _projectName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLatestReleaseName is a free data retrieval call binding the contract method 0x47566e4f.
//
// Solidity: function getLatestReleaseName(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistSession) GetLatestReleaseName(_teamName string, _projectName string) (string, error) {
	return _Valist.Contract.GetLatestReleaseName(&_Valist.CallOpts, _teamName, _projectName)
}

// GetLatestReleaseName is a free data retrieval call binding the contract method 0x47566e4f.
//
// Solidity: function getLatestReleaseName(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistCallerSession) GetLatestReleaseName(_teamName string, _projectName string) (string, error) {
	return _Valist.Contract.GetLatestReleaseName(&_Valist.CallOpts, _teamName, _projectName)
}

// GetProjectMembers is a free data retrieval call binding the contract method 0x4ce72c75.
//
// Solidity: function getProjectMembers(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCaller) GetProjectMembers(opts *bind.CallOpts, _teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getProjectMembers", _teamName, _projectName, _page, _size)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetProjectMembers is a free data retrieval call binding the contract method 0x4ce72c75.
//
// Solidity: function getProjectMembers(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistSession) GetProjectMembers(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetProjectMembers(&_Valist.CallOpts, _teamName, _projectName, _page, _size)
}

// GetProjectMembers is a free data retrieval call binding the contract method 0x4ce72c75.
//
// Solidity: function getProjectMembers(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCallerSession) GetProjectMembers(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetProjectMembers(&_Valist.CallOpts, _teamName, _projectName, _page, _size)
}

// GetProjectMetaCID is a free data retrieval call binding the contract method 0x5be9d4b2.
//
// Solidity: function getProjectMetaCID(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistCaller) GetProjectMetaCID(opts *bind.CallOpts, _teamName string, _projectName string) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getProjectMetaCID", _teamName, _projectName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetProjectMetaCID is a free data retrieval call binding the contract method 0x5be9d4b2.
//
// Solidity: function getProjectMetaCID(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistSession) GetProjectMetaCID(_teamName string, _projectName string) (string, error) {
	return _Valist.Contract.GetProjectMetaCID(&_Valist.CallOpts, _teamName, _projectName)
}

// GetProjectMetaCID is a free data retrieval call binding the contract method 0x5be9d4b2.
//
// Solidity: function getProjectMetaCID(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistCallerSession) GetProjectMetaCID(_teamName string, _projectName string) (string, error) {
	return _Valist.Contract.GetProjectMetaCID(&_Valist.CallOpts, _teamName, _projectName)
}

// GetProjectNames is a free data retrieval call binding the contract method 0xa6a54ec5.
//
// Solidity: function getProjectNames(string _teamName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCaller) GetProjectNames(opts *bind.CallOpts, _teamName string, _page *big.Int, _size *big.Int) ([]string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getProjectNames", _teamName, _page, _size)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetProjectNames is a free data retrieval call binding the contract method 0xa6a54ec5.
//
// Solidity: function getProjectNames(string _teamName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistSession) GetProjectNames(_teamName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetProjectNames(&_Valist.CallOpts, _teamName, _page, _size)
}

// GetProjectNames is a free data retrieval call binding the contract method 0xa6a54ec5.
//
// Solidity: function getProjectNames(string _teamName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCallerSession) GetProjectNames(_teamName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetProjectNames(&_Valist.CallOpts, _teamName, _page, _size)
}

// GetReleaseApprovers is a free data retrieval call binding the contract method 0xb1bc8c8d.
//
// Solidity: function getReleaseApprovers(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCaller) GetReleaseApprovers(opts *bind.CallOpts, _teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseApprovers", _teamName, _projectName, _releaseName, _page, _size)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReleaseApprovers is a free data retrieval call binding the contract method 0xb1bc8c8d.
//
// Solidity: function getReleaseApprovers(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistSession) GetReleaseApprovers(_teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetReleaseApprovers(&_Valist.CallOpts, _teamName, _projectName, _releaseName, _page, _size)
}

// GetReleaseApprovers is a free data retrieval call binding the contract method 0xb1bc8c8d.
//
// Solidity: function getReleaseApprovers(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCallerSession) GetReleaseApprovers(_teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetReleaseApprovers(&_Valist.CallOpts, _teamName, _projectName, _releaseName, _page, _size)
}

// GetReleaseMetaCID is a free data retrieval call binding the contract method 0xcded382f.
//
// Solidity: function getReleaseMetaCID(string _teamName, string _projectName, string _releaseName) view returns(string)
func (_Valist *ValistCaller) GetReleaseMetaCID(opts *bind.CallOpts, _teamName string, _projectName string, _releaseName string) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseMetaCID", _teamName, _projectName, _releaseName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetReleaseMetaCID is a free data retrieval call binding the contract method 0xcded382f.
//
// Solidity: function getReleaseMetaCID(string _teamName, string _projectName, string _releaseName) view returns(string)
func (_Valist *ValistSession) GetReleaseMetaCID(_teamName string, _projectName string, _releaseName string) (string, error) {
	return _Valist.Contract.GetReleaseMetaCID(&_Valist.CallOpts, _teamName, _projectName, _releaseName)
}

// GetReleaseMetaCID is a free data retrieval call binding the contract method 0xcded382f.
//
// Solidity: function getReleaseMetaCID(string _teamName, string _projectName, string _releaseName) view returns(string)
func (_Valist *ValistCallerSession) GetReleaseMetaCID(_teamName string, _projectName string, _releaseName string) (string, error) {
	return _Valist.Contract.GetReleaseMetaCID(&_Valist.CallOpts, _teamName, _projectName, _releaseName)
}

// GetReleaseNames is a free data retrieval call binding the contract method 0x83dfd03e.
//
// Solidity: function getReleaseNames(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCaller) GetReleaseNames(opts *bind.CallOpts, _teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseNames", _teamName, _projectName, _page, _size)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetReleaseNames is a free data retrieval call binding the contract method 0x83dfd03e.
//
// Solidity: function getReleaseNames(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistSession) GetReleaseNames(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetReleaseNames(&_Valist.CallOpts, _teamName, _projectName, _page, _size)
}

// GetReleaseNames is a free data retrieval call binding the contract method 0x83dfd03e.
//
// Solidity: function getReleaseNames(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCallerSession) GetReleaseNames(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetReleaseNames(&_Valist.CallOpts, _teamName, _projectName, _page, _size)
}

// GetReleaseRejectors is a free data retrieval call binding the contract method 0x17289818.
//
// Solidity: function getReleaseRejectors(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCaller) GetReleaseRejectors(opts *bind.CallOpts, _teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseRejectors", _teamName, _projectName, _releaseName, _page, _size)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReleaseRejectors is a free data retrieval call binding the contract method 0x17289818.
//
// Solidity: function getReleaseRejectors(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistSession) GetReleaseRejectors(_teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetReleaseRejectors(&_Valist.CallOpts, _teamName, _projectName, _releaseName, _page, _size)
}

// GetReleaseRejectors is a free data retrieval call binding the contract method 0x17289818.
//
// Solidity: function getReleaseRejectors(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCallerSession) GetReleaseRejectors(_teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetReleaseRejectors(&_Valist.CallOpts, _teamName, _projectName, _releaseName, _page, _size)
}

// GetTeamMembers is a free data retrieval call binding the contract method 0xcfc5efac.
//
// Solidity: function getTeamMembers(string _teamName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCaller) GetTeamMembers(opts *bind.CallOpts, _teamName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getTeamMembers", _teamName, _page, _size)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetTeamMembers is a free data retrieval call binding the contract method 0xcfc5efac.
//
// Solidity: function getTeamMembers(string _teamName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistSession) GetTeamMembers(_teamName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetTeamMembers(&_Valist.CallOpts, _teamName, _page, _size)
}

// GetTeamMembers is a free data retrieval call binding the contract method 0xcfc5efac.
//
// Solidity: function getTeamMembers(string _teamName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCallerSession) GetTeamMembers(_teamName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetTeamMembers(&_Valist.CallOpts, _teamName, _page, _size)
}

// GetTeamMetaCID is a free data retrieval call binding the contract method 0x5bc25e77.
//
// Solidity: function getTeamMetaCID(string _teamName) view returns(string)
func (_Valist *ValistCaller) GetTeamMetaCID(opts *bind.CallOpts, _teamName string) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getTeamMetaCID", _teamName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTeamMetaCID is a free data retrieval call binding the contract method 0x5bc25e77.
//
// Solidity: function getTeamMetaCID(string _teamName) view returns(string)
func (_Valist *ValistSession) GetTeamMetaCID(_teamName string) (string, error) {
	return _Valist.Contract.GetTeamMetaCID(&_Valist.CallOpts, _teamName)
}

// GetTeamMetaCID is a free data retrieval call binding the contract method 0x5bc25e77.
//
// Solidity: function getTeamMetaCID(string _teamName) view returns(string)
func (_Valist *ValistCallerSession) GetTeamMetaCID(_teamName string) (string, error) {
	return _Valist.Contract.GetTeamMetaCID(&_Valist.CallOpts, _teamName)
}

// GetTeamNames is a free data retrieval call binding the contract method 0x4eec58a3.
//
// Solidity: function getTeamNames(uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCaller) GetTeamNames(opts *bind.CallOpts, _page *big.Int, _size *big.Int) ([]string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getTeamNames", _page, _size)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetTeamNames is a free data retrieval call binding the contract method 0x4eec58a3.
//
// Solidity: function getTeamNames(uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistSession) GetTeamNames(_page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetTeamNames(&_Valist.CallOpts, _page, _size)
}

// GetTeamNames is a free data retrieval call binding the contract method 0x4eec58a3.
//
// Solidity: function getTeamNames(uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCallerSession) GetTeamNames(_page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetTeamNames(&_Valist.CallOpts, _page, _size)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Valist *ValistCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Valist *ValistSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Valist.Contract.IsTrustedForwarder(&_Valist.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Valist *ValistCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Valist.Contract.IsTrustedForwarder(&_Valist.CallOpts, forwarder)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Valist *ValistCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Valist *ValistSession) VersionRecipient() (string, error) {
	return _Valist.Contract.VersionRecipient(&_Valist.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Valist *ValistCallerSession) VersionRecipient() (string, error) {
	return _Valist.Contract.VersionRecipient(&_Valist.CallOpts)
}

// AddProjectMember is a paid mutator transaction binding the contract method 0x2aa2fd64.
//
// Solidity: function addProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistTransactor) AddProjectMember(opts *bind.TransactOpts, _teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "addProjectMember", _teamName, _projectName, _address)
}

// AddProjectMember is a paid mutator transaction binding the contract method 0x2aa2fd64.
//
// Solidity: function addProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistSession) AddProjectMember(_teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.AddProjectMember(&_Valist.TransactOpts, _teamName, _projectName, _address)
}

// AddProjectMember is a paid mutator transaction binding the contract method 0x2aa2fd64.
//
// Solidity: function addProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistTransactorSession) AddProjectMember(_teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.AddProjectMember(&_Valist.TransactOpts, _teamName, _projectName, _address)
}

// AddTeamMember is a paid mutator transaction binding the contract method 0x81ded150.
//
// Solidity: function addTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistTransactor) AddTeamMember(opts *bind.TransactOpts, _teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "addTeamMember", _teamName, _address)
}

// AddTeamMember is a paid mutator transaction binding the contract method 0x81ded150.
//
// Solidity: function addTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistSession) AddTeamMember(_teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.AddTeamMember(&_Valist.TransactOpts, _teamName, _address)
}

// AddTeamMember is a paid mutator transaction binding the contract method 0x81ded150.
//
// Solidity: function addTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistTransactorSession) AddTeamMember(_teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.AddTeamMember(&_Valist.TransactOpts, _teamName, _address)
}

// ApproveRelease is a paid mutator transaction binding the contract method 0x11bc1ce0.
//
// Solidity: function approveRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistTransactor) ApproveRelease(opts *bind.TransactOpts, _teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "approveRelease", _teamName, _projectName, _releaseName)
}

// ApproveRelease is a paid mutator transaction binding the contract method 0x11bc1ce0.
//
// Solidity: function approveRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistSession) ApproveRelease(_teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.Contract.ApproveRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName)
}

// ApproveRelease is a paid mutator transaction binding the contract method 0x11bc1ce0.
//
// Solidity: function approveRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistTransactorSession) ApproveRelease(_teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.Contract.ApproveRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName)
}

// CreateProject is a paid mutator transaction binding the contract method 0x4ff3ec60.
//
// Solidity: function createProject(string _teamName, string _projectName, string _metaCID, address[] _members) returns()
func (_Valist *ValistTransactor) CreateProject(opts *bind.TransactOpts, _teamName string, _projectName string, _metaCID string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "createProject", _teamName, _projectName, _metaCID, _members)
}

// CreateProject is a paid mutator transaction binding the contract method 0x4ff3ec60.
//
// Solidity: function createProject(string _teamName, string _projectName, string _metaCID, address[] _members) returns()
func (_Valist *ValistSession) CreateProject(_teamName string, _projectName string, _metaCID string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.Contract.CreateProject(&_Valist.TransactOpts, _teamName, _projectName, _metaCID, _members)
}

// CreateProject is a paid mutator transaction binding the contract method 0x4ff3ec60.
//
// Solidity: function createProject(string _teamName, string _projectName, string _metaCID, address[] _members) returns()
func (_Valist *ValistTransactorSession) CreateProject(_teamName string, _projectName string, _metaCID string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.Contract.CreateProject(&_Valist.TransactOpts, _teamName, _projectName, _metaCID, _members)
}

// CreateRelease is a paid mutator transaction binding the contract method 0x0716dfa0.
//
// Solidity: function createRelease(string _teamName, string _projectName, string _releaseName, string _metaCID) returns()
func (_Valist *ValistTransactor) CreateRelease(opts *bind.TransactOpts, _teamName string, _projectName string, _releaseName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "createRelease", _teamName, _projectName, _releaseName, _metaCID)
}

// CreateRelease is a paid mutator transaction binding the contract method 0x0716dfa0.
//
// Solidity: function createRelease(string _teamName, string _projectName, string _releaseName, string _metaCID) returns()
func (_Valist *ValistSession) CreateRelease(_teamName string, _projectName string, _releaseName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.Contract.CreateRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName, _metaCID)
}

// CreateRelease is a paid mutator transaction binding the contract method 0x0716dfa0.
//
// Solidity: function createRelease(string _teamName, string _projectName, string _releaseName, string _metaCID) returns()
func (_Valist *ValistTransactorSession) CreateRelease(_teamName string, _projectName string, _releaseName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.Contract.CreateRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName, _metaCID)
}

// CreateTeam is a paid mutator transaction binding the contract method 0x5f36788e.
//
// Solidity: function createTeam(string _teamName, string _metaCID, address[] _members) returns()
func (_Valist *ValistTransactor) CreateTeam(opts *bind.TransactOpts, _teamName string, _metaCID string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "createTeam", _teamName, _metaCID, _members)
}

// CreateTeam is a paid mutator transaction binding the contract method 0x5f36788e.
//
// Solidity: function createTeam(string _teamName, string _metaCID, address[] _members) returns()
func (_Valist *ValistSession) CreateTeam(_teamName string, _metaCID string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.Contract.CreateTeam(&_Valist.TransactOpts, _teamName, _metaCID, _members)
}

// CreateTeam is a paid mutator transaction binding the contract method 0x5f36788e.
//
// Solidity: function createTeam(string _teamName, string _metaCID, address[] _members) returns()
func (_Valist *ValistTransactorSession) CreateTeam(_teamName string, _metaCID string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.Contract.CreateTeam(&_Valist.TransactOpts, _teamName, _metaCID, _members)
}

// RejectRelease is a paid mutator transaction binding the contract method 0xbaffd3da.
//
// Solidity: function rejectRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistTransactor) RejectRelease(opts *bind.TransactOpts, _teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "rejectRelease", _teamName, _projectName, _releaseName)
}

// RejectRelease is a paid mutator transaction binding the contract method 0xbaffd3da.
//
// Solidity: function rejectRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistSession) RejectRelease(_teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.Contract.RejectRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName)
}

// RejectRelease is a paid mutator transaction binding the contract method 0xbaffd3da.
//
// Solidity: function rejectRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistTransactorSession) RejectRelease(_teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.Contract.RejectRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName)
}

// RemoveProjectMember is a paid mutator transaction binding the contract method 0x5c537096.
//
// Solidity: function removeProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistTransactor) RemoveProjectMember(opts *bind.TransactOpts, _teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "removeProjectMember", _teamName, _projectName, _address)
}

// RemoveProjectMember is a paid mutator transaction binding the contract method 0x5c537096.
//
// Solidity: function removeProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistSession) RemoveProjectMember(_teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.RemoveProjectMember(&_Valist.TransactOpts, _teamName, _projectName, _address)
}

// RemoveProjectMember is a paid mutator transaction binding the contract method 0x5c537096.
//
// Solidity: function removeProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistTransactorSession) RemoveProjectMember(_teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.RemoveProjectMember(&_Valist.TransactOpts, _teamName, _projectName, _address)
}

// RemoveTeamMember is a paid mutator transaction binding the contract method 0xecb0a33d.
//
// Solidity: function removeTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistTransactor) RemoveTeamMember(opts *bind.TransactOpts, _teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "removeTeamMember", _teamName, _address)
}

// RemoveTeamMember is a paid mutator transaction binding the contract method 0xecb0a33d.
//
// Solidity: function removeTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistSession) RemoveTeamMember(_teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.RemoveTeamMember(&_Valist.TransactOpts, _teamName, _address)
}

// RemoveTeamMember is a paid mutator transaction binding the contract method 0xecb0a33d.
//
// Solidity: function removeTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistTransactorSession) RemoveTeamMember(_teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.RemoveTeamMember(&_Valist.TransactOpts, _teamName, _address)
}

// SetProjectMetaCID is a paid mutator transaction binding the contract method 0xfcaa705e.
//
// Solidity: function setProjectMetaCID(string _teamName, string _projectName, string _metaCID) returns()
func (_Valist *ValistTransactor) SetProjectMetaCID(opts *bind.TransactOpts, _teamName string, _projectName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "setProjectMetaCID", _teamName, _projectName, _metaCID)
}

// SetProjectMetaCID is a paid mutator transaction binding the contract method 0xfcaa705e.
//
// Solidity: function setProjectMetaCID(string _teamName, string _projectName, string _metaCID) returns()
func (_Valist *ValistSession) SetProjectMetaCID(_teamName string, _projectName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.Contract.SetProjectMetaCID(&_Valist.TransactOpts, _teamName, _projectName, _metaCID)
}

// SetProjectMetaCID is a paid mutator transaction binding the contract method 0xfcaa705e.
//
// Solidity: function setProjectMetaCID(string _teamName, string _projectName, string _metaCID) returns()
func (_Valist *ValistTransactorSession) SetProjectMetaCID(_teamName string, _projectName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.Contract.SetProjectMetaCID(&_Valist.TransactOpts, _teamName, _projectName, _metaCID)
}

// SetTeamMetaCID is a paid mutator transaction binding the contract method 0x2d19fdfe.
//
// Solidity: function setTeamMetaCID(string _teamName, string _metaCID) returns()
func (_Valist *ValistTransactor) SetTeamMetaCID(opts *bind.TransactOpts, _teamName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "setTeamMetaCID", _teamName, _metaCID)
}

// SetTeamMetaCID is a paid mutator transaction binding the contract method 0x2d19fdfe.
//
// Solidity: function setTeamMetaCID(string _teamName, string _metaCID) returns()
func (_Valist *ValistSession) SetTeamMetaCID(_teamName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.Contract.SetTeamMetaCID(&_Valist.TransactOpts, _teamName, _metaCID)
}

// SetTeamMetaCID is a paid mutator transaction binding the contract method 0x2d19fdfe.
//
// Solidity: function setTeamMetaCID(string _teamName, string _metaCID) returns()
func (_Valist *ValistTransactorSession) SetTeamMetaCID(_teamName string, _metaCID string) (*types.Transaction, error) {
	return _Valist.Contract.SetTeamMetaCID(&_Valist.TransactOpts, _teamName, _metaCID)
}

// ValistProjectCreatedIterator is returned from FilterProjectCreated and is used to iterate over the raw logs and unpacked data for ProjectCreated events raised by the Valist contract.
type ValistProjectCreatedIterator struct {
	Event *ValistProjectCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistProjectCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistProjectCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistProjectCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistProjectCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistProjectCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistProjectCreated represents a ProjectCreated event raised by the Valist contract.
type ValistProjectCreated struct {
	TeamName    string
	ProjectName string
	MetaCID     string
	Member      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectCreated is a free log retrieval operation binding the contract event 0x11f7f07de1d35c43b47edd8a19e7f8208259cdf66344de81856c5bb7c798db26.
//
// Solidity: event ProjectCreated(string _teamName, string _projectName, string _metaCID, address _member)
func (_Valist *ValistFilterer) FilterProjectCreated(opts *bind.FilterOpts) (*ValistProjectCreatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ProjectCreated")
	if err != nil {
		return nil, err
	}
	return &ValistProjectCreatedIterator{contract: _Valist.contract, event: "ProjectCreated", logs: logs, sub: sub}, nil
}

// WatchProjectCreated is a free log subscription operation binding the contract event 0x11f7f07de1d35c43b47edd8a19e7f8208259cdf66344de81856c5bb7c798db26.
//
// Solidity: event ProjectCreated(string _teamName, string _projectName, string _metaCID, address _member)
func (_Valist *ValistFilterer) WatchProjectCreated(opts *bind.WatchOpts, sink chan<- *ValistProjectCreated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ProjectCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistProjectCreated)
				if err := _Valist.contract.UnpackLog(event, "ProjectCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectCreated is a log parse operation binding the contract event 0x11f7f07de1d35c43b47edd8a19e7f8208259cdf66344de81856c5bb7c798db26.
//
// Solidity: event ProjectCreated(string _teamName, string _projectName, string _metaCID, address _member)
func (_Valist *ValistFilterer) ParseProjectCreated(log types.Log) (*ValistProjectCreated, error) {
	event := new(ValistProjectCreated)
	if err := _Valist.contract.UnpackLog(event, "ProjectCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistProjectMemberAddedIterator is returned from FilterProjectMemberAdded and is used to iterate over the raw logs and unpacked data for ProjectMemberAdded events raised by the Valist contract.
type ValistProjectMemberAddedIterator struct {
	Event *ValistProjectMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistProjectMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistProjectMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistProjectMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistProjectMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistProjectMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistProjectMemberAdded represents a ProjectMemberAdded event raised by the Valist contract.
type ValistProjectMemberAdded struct {
	TeamName    string
	ProjectName string
	Member      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectMemberAdded is a free log retrieval operation binding the contract event 0x8eb5dc57e01da32e2b98214d39ebdd82cd801d261855d5f84b868b5f140a2980.
//
// Solidity: event ProjectMemberAdded(string _teamName, string _projectName, address _member)
func (_Valist *ValistFilterer) FilterProjectMemberAdded(opts *bind.FilterOpts) (*ValistProjectMemberAddedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ProjectMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ValistProjectMemberAddedIterator{contract: _Valist.contract, event: "ProjectMemberAdded", logs: logs, sub: sub}, nil
}

// WatchProjectMemberAdded is a free log subscription operation binding the contract event 0x8eb5dc57e01da32e2b98214d39ebdd82cd801d261855d5f84b868b5f140a2980.
//
// Solidity: event ProjectMemberAdded(string _teamName, string _projectName, address _member)
func (_Valist *ValistFilterer) WatchProjectMemberAdded(opts *bind.WatchOpts, sink chan<- *ValistProjectMemberAdded) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ProjectMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistProjectMemberAdded)
				if err := _Valist.contract.UnpackLog(event, "ProjectMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectMemberAdded is a log parse operation binding the contract event 0x8eb5dc57e01da32e2b98214d39ebdd82cd801d261855d5f84b868b5f140a2980.
//
// Solidity: event ProjectMemberAdded(string _teamName, string _projectName, address _member)
func (_Valist *ValistFilterer) ParseProjectMemberAdded(log types.Log) (*ValistProjectMemberAdded, error) {
	event := new(ValistProjectMemberAdded)
	if err := _Valist.contract.UnpackLog(event, "ProjectMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistProjectMemberRemovedIterator is returned from FilterProjectMemberRemoved and is used to iterate over the raw logs and unpacked data for ProjectMemberRemoved events raised by the Valist contract.
type ValistProjectMemberRemovedIterator struct {
	Event *ValistProjectMemberRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistProjectMemberRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistProjectMemberRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistProjectMemberRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistProjectMemberRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistProjectMemberRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistProjectMemberRemoved represents a ProjectMemberRemoved event raised by the Valist contract.
type ValistProjectMemberRemoved struct {
	TeamName    string
	ProjectName string
	Member      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectMemberRemoved is a free log retrieval operation binding the contract event 0x7bd4fdf0f1872366f33f1732f765696c1ec3ddccaa8c1f72095b58d8f411fa93.
//
// Solidity: event ProjectMemberRemoved(string _teamName, string _projectName, address _member)
func (_Valist *ValistFilterer) FilterProjectMemberRemoved(opts *bind.FilterOpts) (*ValistProjectMemberRemovedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ProjectMemberRemoved")
	if err != nil {
		return nil, err
	}
	return &ValistProjectMemberRemovedIterator{contract: _Valist.contract, event: "ProjectMemberRemoved", logs: logs, sub: sub}, nil
}

// WatchProjectMemberRemoved is a free log subscription operation binding the contract event 0x7bd4fdf0f1872366f33f1732f765696c1ec3ddccaa8c1f72095b58d8f411fa93.
//
// Solidity: event ProjectMemberRemoved(string _teamName, string _projectName, address _member)
func (_Valist *ValistFilterer) WatchProjectMemberRemoved(opts *bind.WatchOpts, sink chan<- *ValistProjectMemberRemoved) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ProjectMemberRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistProjectMemberRemoved)
				if err := _Valist.contract.UnpackLog(event, "ProjectMemberRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectMemberRemoved is a log parse operation binding the contract event 0x7bd4fdf0f1872366f33f1732f765696c1ec3ddccaa8c1f72095b58d8f411fa93.
//
// Solidity: event ProjectMemberRemoved(string _teamName, string _projectName, address _member)
func (_Valist *ValistFilterer) ParseProjectMemberRemoved(log types.Log) (*ValistProjectMemberRemoved, error) {
	event := new(ValistProjectMemberRemoved)
	if err := _Valist.contract.UnpackLog(event, "ProjectMemberRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistProjectUpdatedIterator is returned from FilterProjectUpdated and is used to iterate over the raw logs and unpacked data for ProjectUpdated events raised by the Valist contract.
type ValistProjectUpdatedIterator struct {
	Event *ValistProjectUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistProjectUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistProjectUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistProjectUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistProjectUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistProjectUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistProjectUpdated represents a ProjectUpdated event raised by the Valist contract.
type ValistProjectUpdated struct {
	TeamName    string
	ProjectName string
	MetaCID     string
	Member      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectUpdated is a free log retrieval operation binding the contract event 0xd837747757bf732c911148d7c5825d52de171f849e76143eec98fa514e263c8a.
//
// Solidity: event ProjectUpdated(string _teamName, string _projectName, string _metaCID, address _member)
func (_Valist *ValistFilterer) FilterProjectUpdated(opts *bind.FilterOpts) (*ValistProjectUpdatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ProjectUpdated")
	if err != nil {
		return nil, err
	}
	return &ValistProjectUpdatedIterator{contract: _Valist.contract, event: "ProjectUpdated", logs: logs, sub: sub}, nil
}

// WatchProjectUpdated is a free log subscription operation binding the contract event 0xd837747757bf732c911148d7c5825d52de171f849e76143eec98fa514e263c8a.
//
// Solidity: event ProjectUpdated(string _teamName, string _projectName, string _metaCID, address _member)
func (_Valist *ValistFilterer) WatchProjectUpdated(opts *bind.WatchOpts, sink chan<- *ValistProjectUpdated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ProjectUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistProjectUpdated)
				if err := _Valist.contract.UnpackLog(event, "ProjectUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectUpdated is a log parse operation binding the contract event 0xd837747757bf732c911148d7c5825d52de171f849e76143eec98fa514e263c8a.
//
// Solidity: event ProjectUpdated(string _teamName, string _projectName, string _metaCID, address _member)
func (_Valist *ValistFilterer) ParseProjectUpdated(log types.Log) (*ValistProjectUpdated, error) {
	event := new(ValistProjectUpdated)
	if err := _Valist.contract.UnpackLog(event, "ProjectUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistReleaseApprovedIterator is returned from FilterReleaseApproved and is used to iterate over the raw logs and unpacked data for ReleaseApproved events raised by the Valist contract.
type ValistReleaseApprovedIterator struct {
	Event *ValistReleaseApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistReleaseApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistReleaseApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistReleaseApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistReleaseApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistReleaseApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistReleaseApproved represents a ReleaseApproved event raised by the Valist contract.
type ValistReleaseApproved struct {
	TeamName    string
	ProjectName string
	ReleaseName string
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReleaseApproved is a free log retrieval operation binding the contract event 0xa70c9d49a7ef09401d07a7aad126689c097b80db50504ce9ba5ca8b6f6477fb8.
//
// Solidity: event ReleaseApproved(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) FilterReleaseApproved(opts *bind.FilterOpts) (*ValistReleaseApprovedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ReleaseApproved")
	if err != nil {
		return nil, err
	}
	return &ValistReleaseApprovedIterator{contract: _Valist.contract, event: "ReleaseApproved", logs: logs, sub: sub}, nil
}

// WatchReleaseApproved is a free log subscription operation binding the contract event 0xa70c9d49a7ef09401d07a7aad126689c097b80db50504ce9ba5ca8b6f6477fb8.
//
// Solidity: event ReleaseApproved(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) WatchReleaseApproved(opts *bind.WatchOpts, sink chan<- *ValistReleaseApproved) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ReleaseApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistReleaseApproved)
				if err := _Valist.contract.UnpackLog(event, "ReleaseApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleaseApproved is a log parse operation binding the contract event 0xa70c9d49a7ef09401d07a7aad126689c097b80db50504ce9ba5ca8b6f6477fb8.
//
// Solidity: event ReleaseApproved(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) ParseReleaseApproved(log types.Log) (*ValistReleaseApproved, error) {
	event := new(ValistReleaseApproved)
	if err := _Valist.contract.UnpackLog(event, "ReleaseApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistReleaseCreatedIterator is returned from FilterReleaseCreated and is used to iterate over the raw logs and unpacked data for ReleaseCreated events raised by the Valist contract.
type ValistReleaseCreatedIterator struct {
	Event *ValistReleaseCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistReleaseCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistReleaseCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistReleaseCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistReleaseCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistReleaseCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistReleaseCreated represents a ReleaseCreated event raised by the Valist contract.
type ValistReleaseCreated struct {
	TeamName    string
	ProjectName string
	ReleaseName string
	MetaCID     string
	Member      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReleaseCreated is a free log retrieval operation binding the contract event 0x15fb1d214ed195f7210e450a416a0640362c37a0a2d2d0ab63481f967aae0e00.
//
// Solidity: event ReleaseCreated(string _teamName, string _projectName, string _releaseName, string _metaCID, address _member)
func (_Valist *ValistFilterer) FilterReleaseCreated(opts *bind.FilterOpts) (*ValistReleaseCreatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ReleaseCreated")
	if err != nil {
		return nil, err
	}
	return &ValistReleaseCreatedIterator{contract: _Valist.contract, event: "ReleaseCreated", logs: logs, sub: sub}, nil
}

// WatchReleaseCreated is a free log subscription operation binding the contract event 0x15fb1d214ed195f7210e450a416a0640362c37a0a2d2d0ab63481f967aae0e00.
//
// Solidity: event ReleaseCreated(string _teamName, string _projectName, string _releaseName, string _metaCID, address _member)
func (_Valist *ValistFilterer) WatchReleaseCreated(opts *bind.WatchOpts, sink chan<- *ValistReleaseCreated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ReleaseCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistReleaseCreated)
				if err := _Valist.contract.UnpackLog(event, "ReleaseCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleaseCreated is a log parse operation binding the contract event 0x15fb1d214ed195f7210e450a416a0640362c37a0a2d2d0ab63481f967aae0e00.
//
// Solidity: event ReleaseCreated(string _teamName, string _projectName, string _releaseName, string _metaCID, address _member)
func (_Valist *ValistFilterer) ParseReleaseCreated(log types.Log) (*ValistReleaseCreated, error) {
	event := new(ValistReleaseCreated)
	if err := _Valist.contract.UnpackLog(event, "ReleaseCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistReleaseRejectedIterator is returned from FilterReleaseRejected and is used to iterate over the raw logs and unpacked data for ReleaseRejected events raised by the Valist contract.
type ValistReleaseRejectedIterator struct {
	Event *ValistReleaseRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistReleaseRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistReleaseRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistReleaseRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistReleaseRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistReleaseRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistReleaseRejected represents a ReleaseRejected event raised by the Valist contract.
type ValistReleaseRejected struct {
	TeamName    string
	ProjectName string
	ReleaseName string
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReleaseRejected is a free log retrieval operation binding the contract event 0x30ca79684c561b1b6fbda88d9779021eb510471ea1df05c10dc39c46d6ed94eb.
//
// Solidity: event ReleaseRejected(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) FilterReleaseRejected(opts *bind.FilterOpts) (*ValistReleaseRejectedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ReleaseRejected")
	if err != nil {
		return nil, err
	}
	return &ValistReleaseRejectedIterator{contract: _Valist.contract, event: "ReleaseRejected", logs: logs, sub: sub}, nil
}

// WatchReleaseRejected is a free log subscription operation binding the contract event 0x30ca79684c561b1b6fbda88d9779021eb510471ea1df05c10dc39c46d6ed94eb.
//
// Solidity: event ReleaseRejected(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) WatchReleaseRejected(opts *bind.WatchOpts, sink chan<- *ValistReleaseRejected) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ReleaseRejected")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistReleaseRejected)
				if err := _Valist.contract.UnpackLog(event, "ReleaseRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleaseRejected is a log parse operation binding the contract event 0x30ca79684c561b1b6fbda88d9779021eb510471ea1df05c10dc39c46d6ed94eb.
//
// Solidity: event ReleaseRejected(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) ParseReleaseRejected(log types.Log) (*ValistReleaseRejected, error) {
	event := new(ValistReleaseRejected)
	if err := _Valist.contract.UnpackLog(event, "ReleaseRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamCreatedIterator is returned from FilterTeamCreated and is used to iterate over the raw logs and unpacked data for TeamCreated events raised by the Valist contract.
type ValistTeamCreatedIterator struct {
	Event *ValistTeamCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamCreated represents a TeamCreated event raised by the Valist contract.
type ValistTeamCreated struct {
	TeamName string
	MetaCID  string
	Sender   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTeamCreated is a free log retrieval operation binding the contract event 0x234eb9d37ed58b55e52e99246bb2b0cebb55311292e5d3de44a6df95a9af2501.
//
// Solidity: event TeamCreated(string _teamName, string _metaCID, address _sender)
func (_Valist *ValistFilterer) FilterTeamCreated(opts *bind.FilterOpts) (*ValistTeamCreatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamCreated")
	if err != nil {
		return nil, err
	}
	return &ValistTeamCreatedIterator{contract: _Valist.contract, event: "TeamCreated", logs: logs, sub: sub}, nil
}

// WatchTeamCreated is a free log subscription operation binding the contract event 0x234eb9d37ed58b55e52e99246bb2b0cebb55311292e5d3de44a6df95a9af2501.
//
// Solidity: event TeamCreated(string _teamName, string _metaCID, address _sender)
func (_Valist *ValistFilterer) WatchTeamCreated(opts *bind.WatchOpts, sink chan<- *ValistTeamCreated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamCreated)
				if err := _Valist.contract.UnpackLog(event, "TeamCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamCreated is a log parse operation binding the contract event 0x234eb9d37ed58b55e52e99246bb2b0cebb55311292e5d3de44a6df95a9af2501.
//
// Solidity: event TeamCreated(string _teamName, string _metaCID, address _sender)
func (_Valist *ValistFilterer) ParseTeamCreated(log types.Log) (*ValistTeamCreated, error) {
	event := new(ValistTeamCreated)
	if err := _Valist.contract.UnpackLog(event, "TeamCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamMemberAddedIterator is returned from FilterTeamMemberAdded and is used to iterate over the raw logs and unpacked data for TeamMemberAdded events raised by the Valist contract.
type ValistTeamMemberAddedIterator struct {
	Event *ValistTeamMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamMemberAdded represents a TeamMemberAdded event raised by the Valist contract.
type ValistTeamMemberAdded struct {
	TeamName string
	Member   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTeamMemberAdded is a free log retrieval operation binding the contract event 0xb1ce9c84087af16e758e7041eec971f57c833f4127f64f742c5b0ee14e0537d2.
//
// Solidity: event TeamMemberAdded(string _teamName, address _member)
func (_Valist *ValistFilterer) FilterTeamMemberAdded(opts *bind.FilterOpts) (*ValistTeamMemberAddedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ValistTeamMemberAddedIterator{contract: _Valist.contract, event: "TeamMemberAdded", logs: logs, sub: sub}, nil
}

// WatchTeamMemberAdded is a free log subscription operation binding the contract event 0xb1ce9c84087af16e758e7041eec971f57c833f4127f64f742c5b0ee14e0537d2.
//
// Solidity: event TeamMemberAdded(string _teamName, address _member)
func (_Valist *ValistFilterer) WatchTeamMemberAdded(opts *bind.WatchOpts, sink chan<- *ValistTeamMemberAdded) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamMemberAdded)
				if err := _Valist.contract.UnpackLog(event, "TeamMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamMemberAdded is a log parse operation binding the contract event 0xb1ce9c84087af16e758e7041eec971f57c833f4127f64f742c5b0ee14e0537d2.
//
// Solidity: event TeamMemberAdded(string _teamName, address _member)
func (_Valist *ValistFilterer) ParseTeamMemberAdded(log types.Log) (*ValistTeamMemberAdded, error) {
	event := new(ValistTeamMemberAdded)
	if err := _Valist.contract.UnpackLog(event, "TeamMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamMemberRemovedIterator is returned from FilterTeamMemberRemoved and is used to iterate over the raw logs and unpacked data for TeamMemberRemoved events raised by the Valist contract.
type ValistTeamMemberRemovedIterator struct {
	Event *ValistTeamMemberRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamMemberRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamMemberRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamMemberRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamMemberRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamMemberRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamMemberRemoved represents a TeamMemberRemoved event raised by the Valist contract.
type ValistTeamMemberRemoved struct {
	TeamName string
	Member   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTeamMemberRemoved is a free log retrieval operation binding the contract event 0xbd84f6be96016aa1d03fd0c0ce516da6b2e352520bddd280c744c6c79a378512.
//
// Solidity: event TeamMemberRemoved(string _teamName, address _member)
func (_Valist *ValistFilterer) FilterTeamMemberRemoved(opts *bind.FilterOpts) (*ValistTeamMemberRemovedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamMemberRemoved")
	if err != nil {
		return nil, err
	}
	return &ValistTeamMemberRemovedIterator{contract: _Valist.contract, event: "TeamMemberRemoved", logs: logs, sub: sub}, nil
}

// WatchTeamMemberRemoved is a free log subscription operation binding the contract event 0xbd84f6be96016aa1d03fd0c0ce516da6b2e352520bddd280c744c6c79a378512.
//
// Solidity: event TeamMemberRemoved(string _teamName, address _member)
func (_Valist *ValistFilterer) WatchTeamMemberRemoved(opts *bind.WatchOpts, sink chan<- *ValistTeamMemberRemoved) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamMemberRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamMemberRemoved)
				if err := _Valist.contract.UnpackLog(event, "TeamMemberRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamMemberRemoved is a log parse operation binding the contract event 0xbd84f6be96016aa1d03fd0c0ce516da6b2e352520bddd280c744c6c79a378512.
//
// Solidity: event TeamMemberRemoved(string _teamName, address _member)
func (_Valist *ValistFilterer) ParseTeamMemberRemoved(log types.Log) (*ValistTeamMemberRemoved, error) {
	event := new(ValistTeamMemberRemoved)
	if err := _Valist.contract.UnpackLog(event, "TeamMemberRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamUpdatedIterator is returned from FilterTeamUpdated and is used to iterate over the raw logs and unpacked data for TeamUpdated events raised by the Valist contract.
type ValistTeamUpdatedIterator struct {
	Event *ValistTeamUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamUpdated represents a TeamUpdated event raised by the Valist contract.
type ValistTeamUpdated struct {
	TeamName string
	MetaCID  string
	Member   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTeamUpdated is a free log retrieval operation binding the contract event 0x337efabade1b5802f3a562a44eb0b3222d30ad7717e865d76f4db7ecbea56e80.
//
// Solidity: event TeamUpdated(string _teamName, string _metaCID, address _member)
func (_Valist *ValistFilterer) FilterTeamUpdated(opts *bind.FilterOpts) (*ValistTeamUpdatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamUpdated")
	if err != nil {
		return nil, err
	}
	return &ValistTeamUpdatedIterator{contract: _Valist.contract, event: "TeamUpdated", logs: logs, sub: sub}, nil
}

// WatchTeamUpdated is a free log subscription operation binding the contract event 0x337efabade1b5802f3a562a44eb0b3222d30ad7717e865d76f4db7ecbea56e80.
//
// Solidity: event TeamUpdated(string _teamName, string _metaCID, address _member)
func (_Valist *ValistFilterer) WatchTeamUpdated(opts *bind.WatchOpts, sink chan<- *ValistTeamUpdated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamUpdated)
				if err := _Valist.contract.UnpackLog(event, "TeamUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamUpdated is a log parse operation binding the contract event 0x337efabade1b5802f3a562a44eb0b3222d30ad7717e865d76f4db7ecbea56e80.
//
// Solidity: event TeamUpdated(string _teamName, string _metaCID, address _member)
func (_Valist *ValistFilterer) ParseTeamUpdated(log types.Log) (*ValistTeamUpdated, error) {
	event := new(ValistTeamUpdated)
	if err := _Valist.contract.UnpackLog(event, "TeamUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
